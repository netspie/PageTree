@using Common.Basic.Collections;
@using Corelibs.BlazorShared.UI;
@using Microsoft.JSInterop;
@using PageTree.Client.Shared.Pages
@inherits LayoutComponentBase
@inject NavigationManager Navigation

<div class="page">
    @if (IsJapaneseArcanaHome())
    {
        <main>
            <article class="main-content">
                <CascadingValue Value=@RefreshInvoker>
                    @Body
                </CascadingValue>
            </article>
            @{
                var links = new string[][]
                {
                    new[] {"Learn", $"/learn/pages/{PageTree.Client.Shared.Pages._JapaneseArcana.Page._pageID}" },
                    new[] {"Contact", "/contact" },
                };
            }
            <div>
                <TopOrSideMenu @ref=@_menu Links="@links" OnCollapseChanged="@OnCollapseChanged">
                    <Navbar>
                        <HomeNavbar Links="@links"/>
                    </Navbar>
                </TopOrSideMenu>
            </div>
        </main>
    }
    else
    @if (IsJapaneseArcanaLearn())
    {
        <main>
            <article class="main-content">
                <CascadingValue Value=@RefreshInvoker>
                    @Body
                </CascadingValue>
            </article>
             @{
                var links = new string[][]
                {
                    new[] {"Pages", "/learn/pages" },
                };
            }
            <div>
                <TopOrSideMenu @ref=@_menu Links ="@links" SideOnly=true OnCollapseChanged="@OnCollapseChanged">
                    <Navbar>
                        <HomeNavbar Links="@links" />
                    </Navbar>
                </TopOrSideMenu>
            </div>
        </main>
    }
    else
    @if (IsPageTreeLearn())
    {
        <main>
            <article class="main-content">
                <CascadingValue Value=@RefreshInvoker>
                    @Body
                </CascadingValue>
            </article>
            @{
                var links = new string[][]
                {
                    new[] {"Home", "pagetree/learn" },
                    new[] {"My Projects", "pagetree/learn/projects" },
                };
            }
            <div>
                <TopOrSideMenu @ref=@_menu Links="@links" SideOnly=true OnCollapseChanged="@OnCollapseChanged">
                    <Navbar>
                        <HomeNavbar Links="@links" />
                    </Navbar>
                </TopOrSideMenu>
            </div>
        </main>
    }
    else
    @if (IsPageTreeHome())
    {
        <main>
            <div class="top-row"><PageTree.Client.Shared.Components._PageTree.IndexNavBar /></div>
            <article class="main-content pl-5">
                @Body
            </article>
        </main>
    }
    else
    {
        <main>
            <article class="main-content pl-5">
                @Body
            </article>
        </main>
    }
    <LoadingScreen/>
</div>

@code {
    private readonly static string LearnRoute = "learn";
    private readonly static string PageTreeRoute = "pagetree";

    private string _baseUri;
    private string _currentUri;

    public RefreshInvoker RefreshInvoker { get; set; } = new RefreshInvoker();
    private TopOrSideMenu _menu;

    protected override void OnInitialized()
    {
        _baseUri = Navigation.BaseUri;
        _currentUri = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async Task OnCollapseChanged(bool collapsed)
    {
        await RefreshInvoker.Invoke();
        await InvokeAsync(StateHasChanged);
    }

    private bool IsJapaneseArcanaHome() =>
        _currentUri == _baseUri;

    private bool IsJapaneseArcanaLearn() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{LearnRoute}");

    private bool IsPageTreeHome() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{PageTreeRoute}");

    private bool IsPageTreeLearn() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{PageTreeRoute}/{LearnRoute}");

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        var oldUri = _currentUri;
        _baseUri = Navigation.BaseUri;
        _currentUri = args.Location;
        if (!oldUri.Contains("learn") && _currentUri.Contains("learn"))
            InvokeAsync(StateHasChanged);

        //RefreshInvoker.Invoke();
    }
}
