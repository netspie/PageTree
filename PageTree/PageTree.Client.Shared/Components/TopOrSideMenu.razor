@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JSRuntime

@if (!SideOnly)
{
    @Navbar
}

<div class="menu-topmost">
    <aside class="menu left-menu @_menuCollapseCssClass @_menuHiddenCssClass">
        <div class="navbar-start navbar-start-ext">
            <div class="navbar-brand navbar-brand-ext">
                <div class="navbar-item navbar-brand-item-text is-size-5"><p><b>Japanese</b>Arcana</p></div>
            </div>
        </div>
        <ul class="menu-list menu-list-here navbar-list-top-border pt-5">
            @foreach (var link in Links)
            {
                <NavLink @onclick=@OnButtonClick href="@link[1]" class="is-text is-menu-text" style="background: transparent">
                    @link[0]
                </NavLink>
            }
            <div class="nav-item is-menu-bottom">
                <LoginDisplay Class="login-display-ext" ButtonClass="button is-text is-menu-text is-login-text" />
            </div>
        </ul>
    </aside>
    <a title="Expand" class="menu-icon-link @_menuIconHiddenCssClass" @onclick="ToggleNavMenu">
        <span class="menu-icon-span">
            <img src="@_menuIconImg" class="menu-icon" />
        </span>
    </a>
</div>

@code {
    [Parameter] public Func<bool, Task> OnCollapseChanged { get; set; }

    private static bool _isCollapsed = false;

    private string _menuCollapseCssClass => _isCollapsed ? "collapse" : null;
    private string _menuIconImg;

    private string _menuHiddenCssClass => SideOnly ? null : "left-menu-hidden";
    private string _menuIconHiddenCssClass => SideOnly ? null : "menu-icon-link-hidden";

    [Parameter] public RenderFragment Navbar { get; set; }
    [Parameter] public string[][] Links { get; set; } = new string[][] {};
    [Parameter] public bool SideOnly { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await HandleInitialMenuCollapse();
    }

    private async Task ToggleNavMenu()
    {
        _isCollapsed = !_isCollapsed;
        SetMenuIcon();

        if (OnCollapseChanged != null)
            await OnCollapseChanged(_isCollapsed);
    }

    private Task OnButtonClick()
    {
        return InvokeAsync(StateHasChanged);
    }

    private async Task HandleInitialMenuCollapse()
    {
        var dimension = await JSRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        if (dimension.Width <= 1023)
        {
            _isCollapsed = true;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            _isCollapsed = true;
        }
        SetMenuIcon();

        if (OnCollapseChanged != null)
            await OnCollapseChanged(_isCollapsed);
    }

    private void SetMenuIcon()
    {
        if (_isCollapsed)
            _menuIconImg = "_content/PageTree.Client.Shared/images/icons/forwardburger.png";
        else
            _menuIconImg = "_content/PageTree.Client.Shared/images/icons/backburger.png";
    }

    public Task RefreshView()
    {
        return InvokeAsync(StateHasChanged);
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
