@using Corelibs.BlazorViews.Components;
@using Corelibs.BlazorViews.Layouts;
@using Corelibs.BlazorViews.ViewModels;

@inherits BaseElement

<div class="page-header @_noPaddingTopCssClass">
    @if (Model.Path.Length > 0)
    {
        <div class="path-container">
            <div class="path">
                @for (int i = 0; i < Model.Path.Length; i++)
                {
                    var pathElement = Model.Path[i];
                    <button class="path-element-button" @onclick=@(() => OnPathElementClick?.Invoke(pathElement.ID))>
                        @pathElement.Name
                    </button>

                    if (i <= Model.Path.Length - 2)
                    {
                        <span class="path-element-button">&nbsp;/&nbsp;</span>
                    }
                }
            </div>
        </div>
    }

    @foreach (var artifact in Model.Artifacts)
    {
        <CText
            Text=@artifact.Text
            FontSize=artifact.Font.FontSize />
    }
</div>

@code {
    [Parameter] public ViewModel? Model { get; set; } = new();
    [Parameter] public Func<string, Task> OnPathElementClick { get; set; }

    private string _noPaddingTopCssClass => Model.Path.Length > 0 ? "" : "no-padding-top";

    public class ViewModel
    {
        public IdentityVM[] Path { get; set; } = Array.Empty<IdentityVM>();
        public List<Artifact> Artifacts { get; set; } = new();

        public class Artifact
        {
            public string Text { get; set; } = "";
            public Font Font { get; set; } = new();
        }

        public class Font
        {
            public string FontID { get; init; }
            public float FontSize { get; init; } = 12;
            public FontWeightType FontWeightType { get; init; }
        }

        public enum FontWeightType
        {
            Thin,
            ExtraLight,
            Light,

            Normal,

            Medium,
            SemiBold,
            Bold,
            ExtraBold
        }
    }
}
