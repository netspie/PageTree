@using Common.Basic.Collections;
@using Corelibs.Basic.Collections;
@using Corelibs.BlazorViews.Components
@using Corelibs.BlazorViews.Layouts
@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorShared.UI.Css;
@using Microsoft.JSInterop;
@using PageTree.App.Entities.Styles;

@inherits BaseElement

<div class="property-container" style=@Style @oncontextmenu="HandleRightClick" @oncontextmenu:preventDefault="true">
    <div class="property">
        @if (IsEditMode)
        {
            bool hasGrandParent = Model.ParentIDs.Length >= 2;
            <PropertyMenu @ref=_menu 
                ID=@Model.ID

                OnRemove=OnRemoveInternal
                OnCreateSubpage=OnCreateSubpageInternal
                OnCreateLink=OnCreateLinkInternal
                OnMoveDownButtonClick=OnMoveDownInternal
                OnMoveUpButtonClick=OnMoveUpInternal 
                OnRename=OnRenameButtonClick
                OnResignature=OnResignatureInternal
                OnMoveLevelUpButtonClick=OnMoveLevelUpInternal
                OnMoveLevelDownButtonClick=OnMoveLevelDownInternal

                Index=Index
                IsLast=IsLast 
                HasGrandParent=hasGrandParent
                HasSiblings=Model.HasSiblings />
        }
        @*<ul class="side-menu">
            <input type="checkbox" class="select-checkbox" />
        </ul>*@
        @foreach (var artifact in Model.Artifacts)
        {
            var fontWeight = new CssAttribute((double) artifact.VisualInfo.Font.FontWeight, Unit.None);

            <EditableText Text=@artifact.Identity.Name OnSubmit=OnNameChangedInternal class="no-select" @ref=_nameRef
                FontWeight=@fontWeight 
                FontSize=@artifact.VisualInfo.Font.FontSize />
        }

        @if (IsEditMode)
        {
            <div class="property-info-bar">

                @if (Model.PropertyType == PropertyType.Link)
                {
                    <img class="property-info-bar-image" src="_content/PageTree.Client.Shared/images/icons/link-variant.png" />
                }
                else
                {
                    <div class="property-info-bar-image" />
                }

                @if (!Model.Signature.Name.IsNullOrEmpty())
                {
                    <span class="signature">@Model.Signature.Name</span>
                }
                else
                {
                    <p class="signature">---</p>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ViewModel Model { get; set; } = new();

    [Parameter] public CssAttribute? Width { get; set; }
    [Parameter] public CssAttribute? MinWidth { get; set; }
    [Parameter] public CssAttribute? MaxWidth { get; set; }

    [Parameter] public CssAttribute? Height { get; set; }
    [Parameter] public CssAttribute? MinHeight { get; set; }
    [Parameter] public CssAttribute? MaxHeight { get; set; }

    [Parameter] public bool IsEditMode { get; set; } = true;
    [Parameter] public int Index { get; set; }
    [Parameter] public bool IsLast { get; set; }

    [Parameter] public Func<string, int, Task> OnCreateSubpage { get; set; }
    [Parameter] public Func<string, int, Task> OnCreateLink { get; set; }
    [Parameter] public Func<string, string, Task> OnRemove { get; set; }
    [Parameter] public Func<string, string, int, Task> OnMoveUp { get; set; }
    [Parameter] public Func<string, string, int, Task> OnMoveDown { get; set; }
    [Parameter] public Func<string, string, string, Task> OnMoveLevelUp { get; set; } // parentPageID, propertyID, newParentPageID
    [Parameter] public Func<string, string, Task> OnMoveLevelDown { get; set; } // parentPageID, propertyID
    [Parameter] public Func<string, string, Task<bool>> OnRename { get; set; }
    [Parameter] public Func<string, Task> OnResignature { get; set; }

    [Inject] private IJSRuntime _jsRuntime { get; set; }

    protected PropertyMenu? _menu;
    protected EditableText _nameRef;

    protected Task OnRenameButtonClick()
    {
        _menu.OuterClick.Enabled = false;
        return _nameRef.SetIsEdit(true);
    }

    protected Task<bool> OnNameChangedInternal(string name) => OnRename?.Invoke(Model.ID, name);

    protected async Task HandleRightClick(MouseEventArgs args)
    {
        if (!IsEditMode)
            return;

        //var menuRect = await _jsRuntime.GetRect("property-menu-outer");
        //var siteRect = await _jsRuntime.GetRect("app");

        var x = args.ClientX;
        var y = args.ClientY;

        //if (x + menuRect.Width > siteRect.Width)
        //{
        //    x = siteRect.Width - menuRect.Width;
        //}
        //if (y + menuRect.Height > siteRect.Height)
        //{
        //    y = siteRect.Height - menuRect.Height;
        //}

        await _jsRuntime.InvokeVoidAsync("setPosition", _menu.ContextMenu!.ElementReference, x, y);

        _menu.OuterClick.Enabled = !_menu.OuterClick.Enabled;
        await InvokeAsync(StateHasChanged);
    }

    protected Task OnCreateSubpageInternal(int index)
    {
        _menu.OuterClick.Enabled = false;
        return OnCreateSubpage?.Invoke(Model.ParentIDs.Last(), index + 1);
    }

    protected Task OnCreateLinkInternal(int index)
    {
        _menu.OuterClick.Enabled = false;
        return OnCreateLink?.Invoke(Model.ParentIDs.Last(), index + 1);
    }

    protected Task OnRemoveInternal(string propertyID)
    {
        _menu.OuterClick.Enabled = false;
        return OnRemove?.Invoke(Model.ParentIDs.Last(), propertyID);
    }

    protected Task OnMoveDownInternal(string propertyID, int index)
    {
        _menu.OuterClick.Enabled = false;
        return OnMoveDown?.Invoke(Model.ParentIDs.Last(), propertyID, index);
    }

    protected Task OnMoveUpInternal(string propertyID, int index)
    {
        _menu.OuterClick.Enabled = false;
        return OnMoveUp?.Invoke(Model.ParentIDs.Last(), propertyID, index);
    }

    protected Task OnMoveLevelDownInternal(string propertyID)
    {
        _menu.OuterClick.Enabled = false;
        return OnMoveLevelDown?.Invoke(Model.ParentIDs.Last(), propertyID);
    }

    protected Task OnMoveLevelUpInternal(string propertyID)
    {
        _menu.OuterClick.Enabled = false;
        return OnMoveLevelUp?.Invoke(Model.ParentIDs.Last(), propertyID, Model.ParentIDs.FirstBeforeLast());
    }

    protected Task OnResignatureInternal()
    {
        _menu.OuterClick.Enabled = false;
        return OnResignature?.Invoke(Model.ID);
    }

    private HoverableMenu.MenuVM _menuVM = new()
    {
        Buttons = new()
        {
            new("Create"),
            new("Archive"),
            new("Move Up"),
            new("Move Down"),
            new("Move To Index"),
        }
    };

    public class ViewModel
    {
        public string ID { get; set; }
        public string[] ParentIDs { get; set; }
        public bool HasSiblings { get; set; }
        public IdentityVM Signature { get; set; }

        public PropertyType PropertyType { get; set; }

        public Layout Layout { get; set; }
        public List<ArtifactVM> Artifacts { get; set; } = new();
    }

    public class Layout
    {
        public LayoutType Type { get; set; }
        public float Gap { get; set; }
    }

    public class ArtifactVM
    {
        public ArtifactType Type { get; set; }
        public IdentityVM Identity { get; set; }
        public VisualInfoVM VisualInfo { get; set; } = new();
    }

    public class VisualInfoVM
    {
        public bool Visible { get; set; }
        public FontVM Font { get; set; } = new();
    }

    public class FontVM
    {
        public string Font { get; set; }
        public float FontSize { get; set; } = 12;
        public FontWeightType FontWeight { get; set; }
    }

    public class IdentityVM
    {
        public string ID { get; set; }
        public string Name { get; set; }
    }

    public enum FontWeightType
    {
        Thin = 100, 
        ExtraLight = 200,
        Light = 300,

        Normal = 400,

        Medium = 500,
        SemiBold = 600,
        Bold = 700,
        ExtraBold = 800
    }

    public enum LayoutType
    {
        Vertical,
        Horizontal
    }

    public enum ArtifactType
    {
        Name,
        Signature,
        Metadata
    }
}
