@using Common.Basic.Collections;
@using Corelibs.BlazorShared.UI.Css;
@using PageTree.Client.Shared.Views.Pages;
@using Corelibs.BlazorViews.Components

@inherits Property

<div class="property-container" style=@Style @oncontextmenu="HandleRightClick" @oncontextmenu:preventDefault="true">
    <div class="property">

        @{
            bool hasGrandParent = Model.ParentIDs.Length >= 2;
            <PropertyMenu @ref=_menu
                ID=@Model.ID
                OnRemove=OnRemoveInternal
                OnCreateSubpage=OnCreateSubpageInternal
                OnCreateSubpageChild=OnCreateSubpageChildInternal
                OnMoveDownButtonClick=OnMoveDownInternal
                OnMoveUpButtonClick=OnMoveUpInternal
                OnRename=OnRenameButtonClick
                OnResignature=OnResignatureInternal
                OnMoveLevelUpButtonClick=OnMoveLevelUpInternal
                OnMoveLevelDownButtonClick=OnMoveLevelDownInternal
                Index=Index
                IsLast=IsLast
                HasGrandParent=hasGrandParent
                HasSiblings=Model.HasSiblings />
        }

        @foreach (var artifact in Model.Artifacts)
        {
            var fontWeight = new CssAttribute((double) artifact.VisualInfo.Font.FontWeight, Unit.None);

            var name = !@artifact.Identity.Name.IsNullOrEmpty() ? @artifact.Identity.Name : "New Template";
            <EditableText Text=@name OnSubmit=OnNameChangedInternal @ref=_nameRef Mode=EditableText.ModeType.EditOnClick class_topmost="property-name-container"
                FontWeight=@fontWeight
                FontSize=@artifact.VisualInfo.Font.FontSize />
        }

        <div class="property-info-bar">

            @if (!Model.Signature.Name.IsNullOrEmpty())
            {
                <span class="signature">@Model.Signature.Name</span>
            }
            else
            {
                <p class="signature">---</p>
            }

            @if (Model.ParentIDs.Length <= 1)
            {
                <EditableText Text=@TemplateName OnSubmit=OnTemplateRenameInternal class="template-name" Mode=EditableText.ModeType.EditOnClick />
            }

        </div>
    </div>
</div>

@code {
    [Parameter] public string TemplateName { get; set; }

    [Parameter] public Func<string, string, Task<bool>> OnTemplateRename { get; set; }

    protected Task<bool> OnTemplateRenameInternal(string name) =>
        OnTemplateRename?.Invoke(Model.ID, name);
}
