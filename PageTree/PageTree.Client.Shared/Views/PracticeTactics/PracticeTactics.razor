@using Corelibs.BlazorViews.Components;
@using Corelibs.BlazorViews.Layouts
@using PageTree.App.Pages.Queries;
@using PageTree.App.UseCases.PracticeTactics.Queries;
@using PageTree.Client.Shared.Extensions;
@using PageTree.Client.Shared.Views.Pages;

@implements IView<PracticeTacticsListVM>

<div class="top-panel">
    <h3 class="practice-tactics-text">Practice Tactics</h3>
    <div class="top-right-buttons">
        <button class="button" @onclick=OnAddOnTop>+&lt;</button>
        <button class="button" @onclick=OnAddOnBottom>+&gt;</button>
    </div>
</div>

<div class="practice-tactics">
    <VerticalLayout class="practice-tactics-list">
        @for (int i = 0; i < Model.Values.Length; i++)
        {
            var practiceTactic = Model.Values[i];
            bool isFirst = i == 0;
            bool isLast = i == Model.Values.Length - 1;

            <PracticeTactic
                Model=practiceTactic
                OnAddButtonClick=OnAddSignatureInternal
                OnRemoveButtonClick=OnRemove
                OnNameChanged=OnNameChanged
                OnMoveDownButtonClick=OnMoveDownButtonClickInternal
                OnMoveUpButtonClick=OnMoveUpButtonClickInternal
                IsFirst=isFirst
                IsLast=isLast/>
        }
    </VerticalLayout>
</div>

@{
    var signaturesOptions = Model.Signatures.ToUIIdentityVM();
    <ChooseFromListWindow Options=signaturesOptions @ref=_selectSignatureWindow />
}

<SelectLinkWindow @ref=_selectPageWindow />

@code {
    [Parameter] public PracticeTacticsListVM Model { get; set; } = new();

    public delegate Task OnSelectedDelegate(string pageID);

    [Parameter] public Func<string, int, Task> OnMove { get; set; }
    [Parameter] public Func<Task> OnAddOnTop { get; set; }
    [Parameter] public Func<Task> OnAddOnBottom { get; set; }
    [Parameter] public Func<int, Task> OnAdd { get; set; }
    [Parameter] public Func<string, Task> OnRemove { get; set; }
    [Parameter] public Func<string, string, Task> OnNameChanged { get; set; }

    private SelectLinkWindow _selectPageWindow;
    private ChooseFromListWindow _selectSignatureWindow;

    private void OnPublicRootPageButtonClick()
    {
        //_selectLinkWindow.Show(ProjectID, "", 0);
    }

    //private Task OnSignatureSelected(object data, string signatureID)
    //{
    //    _selectSignatureWindow.OuterClick.Enabled = false;

    //    var propertyID = data as string;
    //    return OnPropertyResignature?.Invoke(propertyID, signatureID);
    //}

    //private async Task OnSelectPublicRootPageInputChanged(string projectID, string input)
    //{
    //    var searchResultOut = await _queries.Execute<GetPagesSearchResultsQuery, GetPagesSearchResultsQueryOut>(
    //       new GetPagesSearchResultsQuery(projectID, input));

    //    if (searchResultOut?.PageVM != null)
    //        await _selectLinkWindow.Update(new() { Values = searchResultOut?.PageVM?.Values });
    //}

    //private string _publicRootPageID;
    //private async Task OnSelectedPublicRootPage(string pageID, int index, string publicRootPageID)
    //{
    //    _publicRootPageID = publicRootPageID;
    //    UpdateEditIfAny();

    //    await InvokeAsync(StateHasChanged);
    //}

    //public Task UpdateSelectLinkWindow(SearchedPagesResultsVM vm)
    //{
    //    var values = vm.Values
    //        .Where(v =>
    //            Model.Properties.FirstOrDefault(p => p.Identity.ID == v.Identity.ID) == null &&
    //            v.Identity.ID != Model.Identity.ID)
    //        .ToArray();

    //    return _selectLinkWindow.Update(new() { Values = values });
    //}

    private Task OnAddSignatureInternal(string id) =>
        CallHandlerAtIndex(id, i => i + 1, (id, i) => OnAdd(i));

    private Task OnMoveUpButtonClickInternal(string id) =>
        CallHandlerAtIndex(id, i => i - 1, (id, i) => OnMove(id, i));

    private Task OnMoveDownButtonClickInternal(string id) => 
        CallHandlerAtIndex(id, i => i + 1, (id, i) => OnMove(id, i));

    private Task CallHandlerAtIndex(string id, Func<int, int> getIndex, Func<string, int, Task> handler)
    {
        if (handler == null)
            return Task.CompletedTask;

        var info = Model.Values
            .Select((v, i) => (v, i))
            .FirstOrDefault(o => o.v.Identity.ID == id);

        int index = getIndex(info.i);
        return handler?.Invoke(id, index);
    }

    public async Task RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);
    }

    public Task RefreshViewModel()
    {
        return Task.CompletedTask;
    }
}
