@using Corelibs.BlazorViews.Components;
@using Corelibs.BlazorViews.Layouts
@using PageTree.App.Pages.Queries;
@using PageTree.App.UseCases.PracticeTactics.Queries;
@using PageTree.Client.Shared.Extensions;
@using PageTree.Client.Shared.Views.Pages;

@implements IView<PracticeTacticsListVM>

<div class="top-panel">
    <h3 class="practice-tactics-text">Practice Tactics</h3>
    <div class="top-right-buttons">
        <button class="button" @onclick=OnAddOnTop>+&lt;</button>
        <button class="button" @onclick=OnAddOnBottom>+&gt;</button>
    </div>
</div>

<div class="practice-tactics">
    <VerticalLayout class="practice-tactics-list">
        @for (int i = 0; i < Model.Values.Length; i++)
        {
            var practiceTactic = Model.Values[i];
            bool isFirst = i == 0;
            bool isLast = i == Model.Values.Length - 1;

            <PracticeTactic
                Model=practiceTactic
                OnAddButtonClick=OnAddSignatureInternal
                OnRemoveButtonClick=OnRemove
                OnNameChanged=OnNameChanged
                OnMoveDownButtonClick=OnMoveDownButtonClickInternal
                OnMoveUpButtonClick=OnMoveUpButtonClickInternal
                IsFirst=isFirst
                IsLast=isLast
                
                OnPageItemAddButtonClick=OnPageItemAdd
                OnPageItemRemoveButtonClick=OnPageItemRemove

                OnPageSignatureAddButtonClick=OnPageSignatureAdd
                OnPageSignatureRemoveButtonClick=OnPageSignatureRemove
                OnPageSignatureButtonClick=OnPageSignatureInternal

                OnQuestionSignatureAddButtonClick=OnQuestionSignatureAdd
                OnQuestionSignatureRemoveButtonClick=OnQuestionSignatureRemove
                OnQuestionSignatureButtonClick=OnQuestionSignatureInternal

                OnAnswerSignatureAddButtonClick=OnAnswerSignatureAdd
                OnAnswerSignatureRemoveButtonClick=OnAnswerSignatureRemove
                OnAnswerSignatureButtonClick=OnAnswerSignatureInternal

                OnSkipAddButtonClick=OnSkipAdd
                OnSkipRemoveButtonClick=OnSkipRemove
                OnSkipButtonClick=OnSkipItemInternal

                OnSkipNotAddButtonClick=OnSkipNotAdd
                OnSkipNotRemoveButtonClick=OnSkipNotRemove
                OnSkipNotButtonClick=OnSkipNotItemInternal

                />
        }
    </VerticalLayout>
</div>

@{
    var signaturesOptions = Model.Signatures.ToUIIdentityVM();
    <ChooseFromListWindow Options=signaturesOptions @ref=_selectSignatureWindow OnSelected=OnSignatureSelected />
}

<SelectLinkWindow @ref=_selectPageWindow OnSelected=OnSelectedPage OnInputChanged=OnSelectLinkInputChanged />

@code {
    [Parameter] public PracticeTacticsListVM Model { get; set; } = new();

    public delegate Task OnSelectedDelegate(string pageID);

    [Parameter] public Func<string, int, Task> OnMove { get; set; }
    [Parameter] public Func<Task> OnAddOnTop { get; set; }
    [Parameter] public Func<Task> OnAddOnBottom { get; set; }
    [Parameter] public Func<int, Task> OnAdd { get; set; }
    [Parameter] public Func<string, Task> OnRemove { get; set; }
    [Parameter] public Func<string, string, Task> OnNameChanged { get; set; }

    [Parameter] public SelectLinkWindow.OnInputChangedDelegate? OnSelectLinkInputChanged { get; set; }

    // Page Items
    public delegate Task OnSelectPageItemElementDelegate(PracticeTacticVM vm, int pageItemIndex, int elementIndex, string selectedSignatureID);

    [Parameter] public Func<PracticeTacticVM, Task> OnPageItemAdd { get; set; }
    [Parameter] public Func<PracticeTacticVM, int, Task> OnPageItemRemove { get; set; }

    [Parameter] public PracticeTactic.OnAddPageItemElementDelegate OnPageSignatureAdd { get; set; }
    [Parameter] public PracticeTactic.OnRemovePageItemElementDelegate OnPageSignatureRemove { get; set; }
    [Parameter] public OnSelectPageItemElementDelegate OnPageSignatureChange { get; set; }

    [Parameter] public PracticeTactic.OnAddPageItemElementDelegate OnQuestionSignatureAdd { get; set; }
    [Parameter] public PracticeTactic.OnRemovePageItemElementDelegate OnQuestionSignatureRemove { get; set; }
    [Parameter] public OnSelectPageItemElementDelegate OnQuestionSignatureChange { get; set; }

    [Parameter] public PracticeTactic.OnAddPageItemElementDelegate OnAnswerSignatureAdd { get; set; }
    [Parameter] public PracticeTactic.OnRemovePageItemElementDelegate OnAnswerSignatureRemove { get; set; }
    [Parameter] public OnSelectPageItemElementDelegate OnAnswerSignatureChange { get; set; }

    // Skip Items
    public delegate Task OnSelectSkipItemElementDelegate(PracticeTacticVM vm, int index, string selectedPageID);

    [Parameter] public PracticeTactic.OnAddSkipItemElementDelegate OnSkipAdd { get; set; }
    [Parameter] public PracticeTactic.OnRemoveSkipItemElementDelegate OnSkipRemove { get; set; }
    [Parameter] public OnSelectSkipItemElementDelegate OnSkipChange { get; set; }

    [Parameter] public PracticeTactic.OnAddSkipItemElementDelegate OnSkipNotAdd { get; set; }
    [Parameter] public PracticeTactic.OnRemoveSkipItemElementDelegate OnSkipNotRemove { get; set; }
    [Parameter] public OnSelectSkipItemElementDelegate OnSkipNotChange { get; set; }

    private SelectLinkWindow _selectPageWindow;
    private ChooseFromListWindow _selectSignatureWindow;

    private PracticeTacticVM _selectedVM;
    private int _index1;
    private int _index2;
    private SelectOperationType _opType;

    private async Task OnPageSignatureInternal(PracticeTacticVM vm, int pageItemIndex, int elementIndex) =>
        OnSignatureItem(vm, pageItemIndex, elementIndex, SelectOperationType.PageSignature);

    private async Task OnQuestionSignatureInternal(PracticeTacticVM vm, int pageItemIndex, int elementIndex) =>
        OnSignatureItem(vm, pageItemIndex, elementIndex, SelectOperationType.QuestionSignature);

    private async Task OnAnswerSignatureInternal(PracticeTacticVM vm, int pageItemIndex, int elementIndex) =>
        OnSignatureItem(vm, pageItemIndex, elementIndex, SelectOperationType.AnswerSignature);

    private async Task OnSkipItemInternal(PracticeTacticVM vm, int index) =>
        OnSkipItem(vm, index, SelectOperationType.SkipPage);

    private async Task OnSkipNotItemInternal(PracticeTacticVM vm, int index) =>
        OnSkipItem(vm, index, SelectOperationType.SkipNotPage);

    private void OnSignatureItem(PracticeTacticVM vm, int pageItemIndex, int elementIndex, SelectOperationType opType)
    {
        _selectedVM = vm;
        _index1 = pageItemIndex;
        _index2 = elementIndex;
        _selectSignatureWindow.OuterClick.Enabled = true;
        _opType = opType;
    }

    private void OnSkipItem(PracticeTacticVM vm, int index, SelectOperationType opType)
    {
        _selectedVM = vm;
        _index1 = index;
        _selectPageWindow.Show(Model.ProjectID, "", int.MinValue);
        _opType = opType;
    }

    private async Task OnSignatureSelected(object data, string signatureID)
    {
        _selectSignatureWindow.OuterClick.Enabled = false;

        if (_opType == SelectOperationType.PageSignature)
            await OnPageSignatureChange?.Invoke(_selectedVM, _index1, _index2, signatureID);
        if (_opType == SelectOperationType.QuestionSignature)
            await OnQuestionSignatureChange?.Invoke(_selectedVM, _index1, _index2, signatureID);
        if (_opType == SelectOperationType.AnswerSignature)
            await OnAnswerSignatureChange?.Invoke(_selectedVM, _index1, _index2, signatureID);
    }

    private async Task OnSelectedPage(string _1, int _2, string selectedPageID)
    {
        if (_opType == SelectOperationType.SkipPage)
            await OnSkipChange?.Invoke(_selectedVM, _index1, selectedPageID);
        if (_opType == SelectOperationType.SkipNotPage)
            await OnSkipNotChange?.Invoke(_selectedVM, _index1, selectedPageID);
    }

    public async Task UpdateSelectLinkWindow(SearchedPagesResultsVM vm)
    {
        await _selectPageWindow.Update(new() { Values = vm?.Values });
    }

    private Task OnAddSignatureInternal(string id) =>
        CallHandlerAtIndex(id, i => i + 1, (id, i) => OnAdd(i));

    private Task OnMoveUpButtonClickInternal(string id) =>
        CallHandlerAtIndex(id, i => i - 1, (id, i) => OnMove(id, i));

    private Task OnMoveDownButtonClickInternal(string id) => 
        CallHandlerAtIndex(id, i => i + 1, (id, i) => OnMove(id, i));

    private Task CallHandlerAtIndex(string id, Func<int, int> getIndex, Func<string, int, Task> handler)
    {
        if (handler == null)
            return Task.CompletedTask;

        var info = Model.Values
            .Select((v, i) => (v, i))
            .FirstOrDefault(o => o.v.Identity.ID == id);

        int index = getIndex(info.i);
        return handler?.Invoke(id, index);
    }

    public async Task RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);
    }

    public Task RefreshViewModel()
    {
        return Task.CompletedTask;
    }

    private enum SelectOperationType
    {
        PageSignature,
        QuestionSignature,
        AnswerSignature,

        SkipPage,
        SkipNotPage,
    }
}
