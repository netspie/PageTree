@inherits ComponentBase
@*@attribute [Route(Uris.Page)]*@
@using Common.Basic.Collections
@using Common.Basic.Maths;
@using Corelibs.Basic.Collections;
@using PageTree.App
@using PageTree.App.Pages.Queries
@using PageTree.App.Practice.Queries
@using PageTree.App.Projects.Commands;
@using PageTree.Domain
@using System.Numerics;

<PageTitle>PageTree</PageTitle>

<div class="main">
    <p class="page-path">
        @if (_vm.Path.Length == 0)
        {
            <i>--no parent--</i>
        }

        <div class="page-path-contents">
            <nav class="breadcrumb" aria-label="breadcrumbs">
                <ul>
                    @for (int i = 0; i < _vm.Path.Length; i++)
                    {
                        var pathIdentity = _vm.Path[i];
                        <li><a href="#" @onclick="@((args) => LoadPage(pathIdentity.ID))">@pathIdentity.Name</a></li>
                        @*<button class="page-path-button" @onclick="@((args) => LoadPage(pathIdentity.ID))">
                            @pathIdentity.Name
                            @if (i < _vm.Path.Length - 1)
                            {
                                <span>&nbsp;/&nbsp;</span>
                            }
                        </button>*@
                    }
                </ul>
            </nav>

        </div>
    </p>
    <div>
        @if (string.IsNullOrEmpty(_vm.SignatureIdentity.ID))
        {
            <i class="signature-text">--no signature--</i>
        }

        <span class="signature-text">@_vm.SignatureIdentity.Name</span>
        <div>
            <input class="page-name-input is-size-2" type="text" placeholder="Enter the page name" value="@_vm.Identity.Name" @oninput="OnNameEdit" @onfocusout="OnPageNameFocusOut" />
        </div>

        <div class="page-property-list">
            @foreach (var property in _vm.Properties)
            {
                <div class="page-property-button" @onclick="@((args) => LoadPage(property.Identity.ID))">
                    <div class="item">
                        <input class="page-name-input" type="text" placeholder="Enter the name" value="@property.Identity.Name" @oninput="((args) => OnPropertyNameEdit(args, property.Identity.ID))" @onclick:stopPropagation="true" @onclick:preventDefault="true"/>
                        <ul class="item-menu">
                            <button class="page-tool-button">
                                <img src="_content/PageTree.Client.Shared/images/icons/file-document-plus-outline.png" class="page-icon" />
                            </button>
                            <button @onclick="(() => EditName(property.Identity.ID))" class="page-tool-button" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                <img src="_content/PageTree.Client.Shared/images/icons/file-document-edit-outline.png" class="page-icon" />
                            </button>
                            <button class="page-tool-button">
                                <img src="_content/PageTree.Client.Shared/images/icons/arrow-up-thin.png" class="page-icon" />
                            </button>
                            <button class="page-tool-button">
                                <img src="_content/PageTree.Client.Shared/images/icons/arrow-down-thin.png" class="page-icon" />
                            </button>
                            <button class="page-tool-button">
                                <img src="_content/PageTree.Client.Shared/images/icons/file-document-remove-outline.png" class="page-icon" />
                            </button>
                        </ul>
                        <div class="item-menu-side">
                            <input type="checkbox">
                            <button class="page-tool-button">
                                <img src="_content/PageTree.Client.Shared/images/icons/chevron-right.png" class="page-icon" />
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="practice-choose-panel-parent">
        <button class="button has-background-info has-text-white"id="practice-button">Practice</button>
        <div class="practice-choose-panel">
            @foreach (var practiceTactic in _vm.PracticeTactics)
            {
                <button class="practice-choose-panel-item" @onclick="@((args) => LoadPracticeCard(practiceTactic.ID))">@practiceTactic.Name</button>
            }

            @*<div class="practice-choose-panel-group">
            <b>Listening</b>
            <button class="practice-choose-panel-item">Radicals</button>
            <button class="practice-choose-panel-item">Words</button>
            </div>*@
        </div>
    </div>
    @if (!_practiceCards.IsNullOrEmpty())
    {
        <button class="outside-button-panel" @onclick=CloseCard></button>
        <div class="practice-panel">
            @*<div class="loader-panel">
        <div class="loader"></div>
        </div>*@
            <div class="practice-panel-card">
                <div class="practice-counter">@(_currentCardIndex + 1) / @_practiceCards.Length</div>

                <div class="practice-questions">
                    @foreach (var question in _practiceCards[_currentCardIndex].Questions)
                    {
                        <div class="practice-question">@question</div>
                    }
                </div>

                <div class="practice-answers">
                    @if (_answerVisible)
                    {
                        @foreach (var answers in _practiceCards[_currentCardIndex].Answers)
                        {
                            <div class="practice-answer">@answers</div>
                        }
                    }

                </div>

                <div class="practice-menu">
                    <button class="practice-menu-button" @onclick=@(() => NextCard(-1))><b>PREVIOUS</b></button>
                    <button class="practice-menu-button" @onclick=SwitchAnswerVisibility><b>ANSWER</b></button>
                    <button class="practice-menu-button" @onclick=@(() => NextCard(1))><b>NEXT</b></button>
                </div>
                @*<button class="practice-quit-button"><b>X</b></button>*@
            </div>
        </div>
    }
    <nav class="page-navbar">
        <button class="page-tool-button" @onclick="CreateSubPage">
            <img src="_content/PageTree.Client.Shared/images/icons/file-document-plus-outline.png" class="page-icon" />
        </button>
        <button class="page-tool-button" >
            <img src="_content/PageTree.Client.Shared/images/icons/arrow-left-bold.png" class="page-icon" />
        </button>
        <button class="page-tool-button" >
            <img src="_content/PageTree.Client.Shared/images/icons/arrow-right-bold.png" class="page-icon" />
        </button>
        <button class="page-tool-button" @onclick="OnNavigateUp">
            <img src="_content/PageTree.Client.Shared/images/icons/arrow-up-bold-box.png" class="page-icon" />
        </button>
    </nav>
</div>

@code {
    [Inject] private ICommandExecutor _commands { get; set; }
    [Inject] private IQueryExecutor _queries { get; set; }

    [Parameter] public string ProjectID { get; set; }
    [Parameter] public string PageID { get; set; }

    private PageVM _vm = new PageVM()
    {
        Identity = new IdentityVM()
        {
            Name = "Root Page"
        }
    };

    private PracticeCardDTO[] _practiceCards = Array.Empty<PracticeCardDTO>();
    private int _currentCardIndex;
    private bool _answerVisible;

    protected override async Task OnInitializedAsync()
    {
        var dto = await _queries.Execute<GetPageQuery, GetPageQueryOut>(PageID);
        await RefreshVM();
    }

    private async Task RefreshVM()
    {
        var dto = await _queries.Execute<GetPageQuery, GetPageQueryOut>(PageID);
        if (dto != null && dto.PageVM != null)
            _vm = dto.PageVM;
    }

    private async Task RefreshVMAndView()
    {
        await RefreshVM();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPage(string pageID)
    {
        PageID = pageID;
        await RefreshVMAndView();
    }

    private async Task LoadPracticeCard(string tacticID)
    {
        //_practiceCards = await PagesService.GetPracticeCards(_vm.Identity.ID, tacticID);
        _currentCardIndex = 0;

        await InvokeAsync(StateHasChanged);
    }

    private void CloseCard()
    {
        _practiceCards = Array.Empty<PracticeCardDTO>();

        InvokeAsync(StateHasChanged);
    }

    private void NextCard(int step)
    {
        if (step == 0)
            return;

        _answerVisible = false;
        _currentCardIndex.IncreaseBy(step, 0, _practiceCards.Length - 1, loop: false);

        InvokeAsync(StateHasChanged);
    }

    private void SwitchAnswerVisibility()
    {
        _answerVisible = !_answerVisible;
        InvokeAsync(StateHasChanged);
    }

    private async Task CreateSubPage()
    {
        await _commands.Execute<CreateSubPageCommand>(PageID);
        await RefreshVMAndView();
    }

    private async Task OnNameEdit(ChangeEventArgs args)
    {
        var valueStr = args.Value as string;
        _vm.Identity.Name = valueStr.Trim();
        await _commands.Execute(new UpdatePageCommand(_vm.Identity.ID) { Name = _vm.Identity.Name });
        Console.WriteLine("Edit");
    }

    private async Task OnPropertyNameEdit(ChangeEventArgs args, string propertyID)
    {
        Console.WriteLine("OnPropertyNameEdit");
    }

    private void OnNameChange(ChangeEventArgs args)
    {
        Console.WriteLine("Change");
    }

    private void OnPageNameFocusOut(FocusEventArgs args)
    {
        Console.WriteLine("Focus Out");
    }

    private async Task OnNavigateUp()
    {
        var parentID = _vm.Path.LastOrDefault()?.ID;
        if (!parentID.IsID() || parentID == PageID)
            return;

        PageID = parentID;
        await RefreshVMAndView();
    }

    private void EditName(string propertyID)
    {
        Console.WriteLine("OnEditButton");
    }
}
