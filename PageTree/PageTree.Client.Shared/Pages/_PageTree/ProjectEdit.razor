@inherits ComponentBase
@attribute [Route(Uris.ProjectEdit)]
@using PageTree.App.Projects.Commands;
@using PageTree.App.Projects.Queries;

<PageTitle>PageTree</PageTitle>

<div class="main">
    <h1>Edit project</h1>

    <div class="field is-horizontal">
        <div class="field-label is-normal">
            <label class="label">Name</label>
        </div>
        <div class="field-body">
            <div class="field">
                <div class="control">
                    <input class="input" type="text" placeholder="e.g. Partnership opportunity" value="@_projectVM.Name" @oninput="OnNameEdit">
                </div>
                @*<p class="help is-danger">
                    This field is required
                </p>*@
            </div>
        </div>
    </div>

    <div class="field is-horizontal">
        <div class="field-label is-normal">
            <label class="label">Description</label>
        </div>
        <div class="field-body">
            <div class="field">
                <div class="control">
                    <textarea class="textarea" placeholder="Provide a description for your project" @oninput="OnDescriptionEdit">@_projectVM.Description</textarea>
                </div>
            </div>
        </div>
    </div>

    <div class="field is-horizontal">
        <div class="field-label">
            <!-- Left empty for spacing -->
        </div>
        <div class="field-body">
            <div class="field">
                <div class="control">
                    <button class="button is-primary @CssClass_IsStatic" @onclick="OnSave">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string? ProjectID { get; set; }

    [Inject] private NavigationManager _navigation { get; set; }
    [Inject] private IQueryExecutor _queries { get; set; }
    [Inject] private ICommandExecutor _commands { get; set; }

    private ProjectVM _projectVM = new ProjectVM("", "", "");

    private string CssClass_IsStatic => _hasEdit ? null : "is-static";

    protected override async Task OnInitializedAsync()
    {
        await RefreshVM();
    }

    private async Task RefreshVM()
    {
        var projectOut = await _queries.Execute<GetProjectQuery, GetProjectQueryOut>(ProjectID);
        if (projectOut != null)
            _projectVM = projectOut.ProjectVM;

        _name = _projectVM.Name;
        _description = _projectVM.Description;
    }

    private async Task RefreshVMAndView()
    {
        await RefreshVM();
        await InvokeAsync(StateHasChanged);
    }

    private string _name;

    private void OnNameEdit(ChangeEventArgs args)
    {
        _name = args.Value as string;
        _name = _name.Trim();
        args.Value = _name;

        UpdateEditIfAny();
    }

    private string _description;

    private void OnDescriptionEdit(ChangeEventArgs args)
    {
        _description = args.Value as string;
        _description = _description.Trim();
        args.Value = _description;

        UpdateEditIfAny();
    }

    private bool _hasEdit;
    private void UpdateEditIfAny()
    {
        _hasEdit = false;
        
        _description.Trim();


        if (_name != _projectVM.Name)
            _hasEdit = true;

        if (_description != _projectVM.Description)
            _hasEdit = true;
    }

    private async Task OnSave()
    {
        if (!_hasEdit)
            return;

        await _commands.Execute(new EditProjectCommand(_projectVM.ID, _name, _description));
        await RefreshVMAndView();
        _navigation.NavigateTo(Uris.Projects);
    }
}
