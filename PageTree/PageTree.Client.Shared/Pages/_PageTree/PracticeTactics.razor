@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorViews.Layouts;
@using Microsoft.JSInterop;
@using PageTree.App.Pages.Queries;
@using PageTree.App.UseCases.Common;
@using PageTree.App.UseCases.PracticeTactics.Common;
@using PageTree.App.UseCases.PracticeTactics.Queries;
@using PageTree.App.UseCases.PracticeTactics.Commands;

@attribute [Route(Uris.PracticeTactics)]
@inherits BasePage<GetProjectPracticeTacticsQuery, GetProjectPracticeTacticsQueryOut, PracticeTacticsListVM,
    PageTree.Client.Shared.Views.PracticeTactics.PracticeTactics>

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>
    <div class="signatures-container">
        <PageTree.Client.Shared.Views.PracticeTactics.PracticeTactics
            @ref=_view

            OnAdd=OnAdd
            OnAddOnTop=OnAddOnTop 
            OnAddOnBottom=OnAddOnBottom
            OnRemove=OnSignature
            OnNameChanged=OnNameChanged
            OnMove=OnMove
            
            OnSelectLinkInputChanged=OnSelectLinkInputChanged

            OnPageItemAdd=OnPageItemAdd
            OnPageItemRemove=OnPageItemRemove

            OnPageSignatureAdd=OnPageSignatureAdd
            OnPageSignatureRemove=OnPageSignatureRemove
            OnPageSignatureChange=OnPageSignatureChange

            OnQuestionSignatureAdd=OnQuestionSignatureAdd
            OnQuestionSignatureRemove=OnQuestionSignatureRemove
            OnQuestionSignatureChange=OnQuestionSignatureChange

            OnAnswerSignatureAdd=OnAnswerSignatureAdd
            OnAnswerSignatureRemove=OnAnswerSignatureRemove
            OnAnswerSignatureChange=OnAnswerSignatureChange

            OnSkipAdd=OnSkipItemAdd
            OnSkipRemove=OnSkipItemRemove
            OnSkipChange=OnSkipItemChange

            OnSkipNotAdd=OnSkipNotItemAdd
            OnSkipNotRemove=OnSkipNotItemRemove
            OnSkipNotChange=OnSkipNotItemChange

            />
    </div>
</BackgroundAndContent>

@code {
    [Parameter] public string PracticeTacticID { get; set; }
    [Parameter] public string ProjectID { get; set; }

    #region Practice Tactic

    private async Task OnAdd(int index)
    {
        await ExecuteCreateCommand(index);
        await RefreshView();
    }

    private async Task OnAddOnTop()
    {
        await ExecuteCreateCommand(0);
        await RefreshView();
    }

    private async Task OnAddOnBottom()
    {
        await ExecuteCreateCommand(int.MaxValue);
        await RefreshView();
    }

    private async Task OnMove(string id, int index)
    {
        await _commands.Execute(new ChangeIndexOfPracticeTacticCommand(id, index));
        await RefreshView();
    }

    private async Task OnSignature(string id)
    {
        await _commands.Execute(new DeletePracticeTacticCommand(id));
        await RefreshView();
    }

    private async Task OnNameChanged(string id, string name)
    {
        await _commands.Execute(new ChangeNameOfPracticeTacticCommand(id, name));
        await RefreshView();
    }

    private Task ExecuteCreateCommand(int index) =>
        _commands.Execute(new CreatePracticeTacticCommand(_vm.RootID, index));

    #endregion

    #region Page Items

    private Task OnPageItemAdd(PracticeTacticVM vm)
    {
        vm.PageItems = vm.PageItems.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnPageItemRemove(PracticeTacticVM vm, int index)
    {
        vm.PageItems = vm.PageItems.Where((item, i) => i != index).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnPageSignatureAdd(PracticeTacticVM vm, int pageItemIndex)
    {
        vm.PageItems[pageItemIndex].PageSignatures = vm.PageItems[pageItemIndex].PageSignatures.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnPageSignatureRemove(PracticeTacticVM vm, int pageItemIndex, int elementIndex)
    {
        vm.PageItems[pageItemIndex].PageSignatures = vm.PageItems[pageItemIndex].PageSignatures.Where((s, i) => i != elementIndex).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnPageSignatureChange(PracticeTacticVM vm, int pageItemIndex, int elementIndex, string signatureID)
    {
        vm.PageItems[pageItemIndex].PageSignatures[elementIndex] = new(signatureID);
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnQuestionSignatureAdd(PracticeTacticVM vm, int pageItemIndex)
    {
        vm.PageItems[pageItemIndex].QuestionsSignatures = vm.PageItems[pageItemIndex].QuestionsSignatures.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnQuestionSignatureRemove(PracticeTacticVM vm, int pageItemIndex, int elementIndex)
    {
        vm.PageItems[pageItemIndex].QuestionsSignatures = vm.PageItems[pageItemIndex].QuestionsSignatures.Where((s, i) => i != elementIndex).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnQuestionSignatureChange(PracticeTacticVM vm, int pageItemIndex, int elementIndex, string signatureID)
    {
        vm.PageItems[pageItemIndex].QuestionsSignatures[elementIndex] = new(signatureID);
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnAnswerSignatureAdd(PracticeTacticVM vm, int pageItemIndex)
    {
        vm.PageItems[pageItemIndex].AnswersSignatures = vm.PageItems[pageItemIndex].AnswersSignatures.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnAnswerSignatureRemove(PracticeTacticVM vm, int pageItemIndex, int elementIndex)
    {
        vm.PageItems[pageItemIndex].AnswersSignatures = vm.PageItems[pageItemIndex].AnswersSignatures.Where((s, i) => i != elementIndex).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnAnswerSignatureChange(PracticeTacticVM vm, int pageItemIndex, int elementIndex, string signatureID)
    {
        vm.PageItems[pageItemIndex].AnswersSignatures[elementIndex] = new(signatureID);
        return SendUpdateCommandAndRefresh(vm);
    }

    private async Task SendUpdateCommandAndRefresh(PracticeTacticVM vm)
    {
        await _commands.Execute(new UpdateDataOfPracticeTacticCommand(vm.Identity.ID, vm.ToCommandVM()));
        await RefreshView();
    }

    #endregion

    #region Skip Items

    private Task OnSkipItemAdd(PracticeTacticVM vm)
    {
        vm.PagesToSkipIfContainsID = vm.PagesToSkipIfContainsID.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnSkipItemRemove(PracticeTacticVM vm, int index)
    {
        vm.PagesToSkipIfContainsID = vm.PagesToSkipIfContainsID.Where((item, i) => i != index).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnSkipItemChange(PracticeTacticVM vm, int index, string selectedPageID)
    {
        vm.PagesToSkipIfContainsID[index] = new(selectedPageID);
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnSkipNotItemAdd(PracticeTacticVM vm)
    {
        vm.PagesToSkipIfNotContainsID = vm.PagesToSkipIfNotContainsID.Append(new()).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnSkipNotItemRemove(PracticeTacticVM vm, int index)
    {
        vm.PagesToSkipIfNotContainsID = vm.PagesToSkipIfNotContainsID.Where((item, i) => i != index).ToArray();
        return SendUpdateCommandAndRefresh(vm);
    }

    private Task OnSkipNotItemChange(PracticeTacticVM vm, int index, string selectedPageID)
    {
        vm.PagesToSkipIfNotContainsID[index] = new(selectedPageID);
        return SendUpdateCommandAndRefresh(vm);
    }

    #endregion

    private async Task OnSelectLinkInputChanged(string projectID, string input)
    {
        var searchResultOut = await _queries.Execute<GetPagesSearchResultsQuery, GetPagesSearchResultsQueryOut>(
            new GetPagesSearchResultsQuery(projectID, input));

        if (searchResultOut?.PageVM != null)
            await _view.UpdateSelectLinkWindow(searchResultOut.PageVM);
    }

    protected override string QueryParameter => ProjectID;
}
