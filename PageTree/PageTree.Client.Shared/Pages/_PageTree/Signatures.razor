@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorViews.Layouts;
@using Microsoft.JSInterop;
@using PageTree.App.UseCases.Signatures.Commands;
@using PageTree.App.UseCases.Signatures.Queries;

@attribute [Route(Uris.Signatures)]
@inherits BasePage<GetProjectSignaturesQuery, GetProjectSignaturesQueryOut, SignatureListVM>

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>
    <div class="signatures-container">
        <PageTree.Client.Shared.Views.Signatures.Signatures 
            Model=_vm
            OnAddSignature=OnAddSignature 
            OnAddSignatureOnTop=OnAddSignatureOnTop 
            OnAddSignatureOnBottom=OnAddSignatureOnBottom
            OnRemoveSignature=OnRemoveSignature
            OnNameChanged=OnSignatureNameChanged
            OnMoveSignature=OnMoveSignature/>
    </div>
</BackgroundAndContent>

@code {
    [Parameter] public string ProjectID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshViewModel();
    }

    private async Task OnAddSignature(int index)
    {
        await ExecuteCreateSignatureCommand(index);
        await RefreshView();
    }

    private async Task OnAddSignatureOnTop()
    {
        await ExecuteCreateSignatureCommand(0);
        await RefreshView();
    }

    private async Task OnAddSignatureOnBottom()
    {
        await ExecuteCreateSignatureCommand(int.MaxValue);
        await RefreshView();
    }

    private async Task OnMoveSignature(string id, int index)
    {
        await _commands.Execute(new ChangeIndexOfSignatureCommand(id, index));
        await RefreshView();
    }

    private async Task OnRemoveSignature(string id)
    {
        await _commands.Execute(new DeleteSignatureCommand(id));
        await RefreshView();
    }

    private async Task OnSignatureNameChanged(string id, string name)
    {
        await _commands.Execute(new ChangeNameOfSignatureCommand(id, name));
        await RefreshView();
    }

    private Task ExecuteCreateSignatureCommand(int index) =>
        _commands.Execute(new CreateSignatureCommand(_vm.SignatureRootID, index));

    protected override string QueryParameter => ProjectID;
}
