@using PageTree.App.PageTemplates.Commands;
@using PageTree.App.PageTemplates.Queries;
@using PageTree.Client.Shared.Views.PageTemplates;

@attribute [Route(Uris.Templates)]

@inherits BasePage<GetPageTemplatesQuery, GetPageTemplatesQueryOut, PageTemplatesVM, PageTree.Client.Shared.Views.PageTemplates.PageTemplates>

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>

    <PageTree.Client.Shared.Views.PageTemplates.PageTemplates
        @ref=_view
        Model=_vm
        Left=@context.Item1 Top=@context.Item2
        
        OnAddSubPage=OnAddSubPage
        OnAddSubPageOnTop=OnAddSubPageOnTop
        OnAddSubPageOnBottom=OnAddSubPageOnBottom

        OnPropertyMove=OnPropertyReorder

        OnChangeExpand=OnChangeExpand

        OnPageRename=OnPageRename
        OnTemplateRename=OnPageTemplateRename
        OnPropertyRemove=OnPropertyRemove
        />

</BackgroundAndContent>

@code {
    [Parameter] public string PageTemplateID { get; set; }
    [Parameter] public string ProjectID { get; set; }

    private async Task OnChangeExpand(string pageID, bool isExpanded)
    {
        await _commands.Execute(new ChangeExpandOfPageTemplateCommand(pageID, isExpanded));
        await RefreshView();
    }

    private async Task OnAddSubPage(string pageID, int index)
    {
        await _commands.Execute(new CreateSubPageTemplateCommand(pageID, index));
        await RefreshView();
    }

    private async Task OnAddSubPageOnTop()
    {
        await _commands.Execute(new CreateSubPageTemplateCommand(PageTemplateID, 0));
        await RefreshView();
    }

    private async Task OnAddSubPageOnBottom()
    {
        await _commands.Execute(new CreateSubPageTemplateCommand(PageTemplateID, int.MaxValue));
        await RefreshView();
    }

    private async Task OnPropertyReorder(string pageID, string propertyID, int index)
    {
        await _commands.Execute(new ChangeIndexOfPropertyTemplateCommand(pageID, propertyID, index));
        await RefreshView();
    }

    private async Task<bool> OnPageRename(string pageID, string name)
    {
        await _commands.Execute(new ChangeNameOfPageTemplatePageCommand(pageID, name));
        await RefreshView();

        return true;
    }

    private async Task<bool> OnPageTemplateRename(string pageID, string name)
    {
        await _commands.Execute(new ChangeNameOfPageTemplateCommand(pageID, name));
        await RefreshView();

        return true;
    }

    private async Task OnPropertyRemove(string pageID, string propertyID)
    {
        await _commands.Execute(new RemovePropertyTemplateCommand(pageID, propertyID));
        await RefreshView();
    }

    protected override string QueryParameter => PageTemplateID;
}
