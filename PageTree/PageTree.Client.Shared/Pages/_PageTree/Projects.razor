@using Corelibs.Basic.Collections;
@using PageTree.App.ProjectUserLists.Queries;
@using PageTree.App.Projects.Commands;
@using PageTree.App.UseCases.Users.Queries;
@inherits ComponentBase
@attribute [Route(Uris.Projects)]

<PageTitle>PageTree</PageTitle>

<div class="main">
    <h1>My Projects</h1>

    @foreach (var project in _projectUserListVM.Projects)
    {
        <div class="card">
            <header class="card-header">
                <p class="card-header-title">
                    @project.Name
                </p>
            </header>
            <div class="card-content">
                <div class="content">
                    @project.Description
                </div>
            </div>
            <footer class="card-footer">
                @{var projectEditUri = $"{Uris.Projects}/{@project.ID}"; }
                <NavLink href="@projectEditUri" class="card-footer-item">
                    <div class="card-footer-item">Edit</div>
                </NavLink>

                <NavLink class="card-footer-item" @onclick="(() => ArchiveProject(project.ID))">
                    <div class="card-footer-item">Archive</div>
                </NavLink>

                @{var pageUri = $"{projectEditUri}/pages/{@project.RootPageID}"; }
                <NavLink href="@pageUri" class="card-footer-item">
                    <div class="card-footer-item">Pages</div>
                </NavLink>

                @{var signaturesUri = $"{projectEditUri}/signatures/{@project.SignatureRootID}"; }
                <NavLink href="@signaturesUri" class="card-footer-item">
                    <div class="card-footer-item">Signatures</div>
                </NavLink>

                @{var templatePagesUri = $"{projectEditUri}/templatePages/{@project.TemplatePageRootID}"; }
                <NavLink href="@templatePagesUri" class="card-footer-item">
                    <div class="card-footer-item">Template Pages</div>
                </NavLink>

                @{var practiceCategoriesUri = $"{projectEditUri}/practiceCategories/{@project.PracticeCategoriesID}"; }
                <NavLink href="@practiceCategoriesUri" class="card-footer-item">
                    <div class="card-footer-item">Practice Categories</div>
                </NavLink>

                @{var practiceTacticsUri = $"{projectEditUri}/practiceTactics/{@project.PracticeTacticsID}"; }
                <NavLink href="@practiceTacticsUri" class="card-footer-item">
                    <div class="card-footer-item">Practice Tactics</div>
                </NavLink>
            </footer>
        </div>
    }
    <button class="button is-primary" @onclick=AddProject>Add</button>
</div>

@code {
    [Inject] private IQueryExecutor Queries { get; set; }
    [Inject] private ICommandExecutor Commands { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    private ProjectUserListVM _projectUserListVM = new(string.Empty, new ProjectVM[] {});

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await Queries.Execute<GetUserQuery, GetUserQueryOut>();
        if (!user || !user.ProjectUserListID.IsID())
        {
            Navigation.NavigateToBase();
            return;
        }

        var projectList = await Queries.Execute<GetProjectUserListQuery, GetProjectUserListQueryOut>(user.ProjectUserListID);
        if (projectList == null)
        {
            Navigation.NavigateToBase();
            return;
        }

        _projectUserListVM = projectList.ProjectUserListVM;
    }

    private async Task AddProject()
    {
        await Commands.Execute<CreateProjectCommand>(_projectUserListVM.ID);
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ArchiveProject(string projectID)
    {
        await Commands.Execute(new ArchiveProjectCommand(projectID, _projectUserListVM.ID));
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }
}
