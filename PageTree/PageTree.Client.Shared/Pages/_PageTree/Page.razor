@attribute [Route(Uris.Page)]

@inherits BasePage<GetPageQuery, GetPageQueryOut, PageVM, PageTree.Client.Shared.Views.Pages.Page>
@implements IDisposable

@using Common.Basic.Collections;
@using Corelibs.Basic.Collections;
@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorViews.Layouts;
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Microsoft.JSInterop;
@using PageTree.App.Pages.Commands;
@using PageTree.App.Pages.Queries;
@using PageTree.App.Projects.Commands;

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>

    <PageTree.Client.Shared.Views.Pages.Page 
        @ref=_view
        Left=@context.Item1 Top=@context.Item2 
        OnPropertyClick=OnPropertyClick 
        Model=_vm

        OnNavigateUp=OnNavigateUp
        OnAddSubPage=OnAddSubPage
        OnSelectLinkInputChanged=OnSelectLinkInputChanged
        OnSelectLinkSelected=OnSelectLinkSelected
        OnAddSubPageOnTop=OnAddSubPageOnTop
        OnAddSubPageOnBottom=OnAddSubPageOnBottom 
        OnPropertyRemove=OnPropertyRemove 
        OnPropertyMove=OnPropertyReorder
        OnPropertyMoveLevel=OnPropertyMoveLevel
        OnPropertyRename=OnPropertyRename
        OnPropertyResignature=OnPropertyResignature
        OnPathElementClick=OnPathElementClick />

</BackgroundAndContent>

@code {
    [Parameter] public string ProjectID { get; set; }
    [Parameter] public string PageID { get; set; }

    private DotNetObjectReference<Page> _ref;
    private string _previousUrl;

    protected async override Task OnInitializedAsync()
    {
        _navigation.LocationChanged += OnLocationChanged;

        _ref = DotNetObjectReference.Create(this);

        await _jsRuntime.AddKeyDownEventHandler(_ref, nameof(OnKeyDown));
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _ref.Dispose();
    }

    [JSInvokableAttribute("OnKeyDown")]
    public async Task OnKeyDown(bool isCtrl, bool altKey, string key)
    {
        if (key == "Escape")
        {
            if (!_previousUrl.IsNullOrEmpty())
                await _jsRuntime.NavigateBack();
        }

        if (altKey && key == "ArrowUp")
        {
            await OnNavigateUp();
        }
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        await RefreshView();
    }

    private Task NavigateTo(string pageID)
    {
        if (!pageID.IsID())
            return Task.CompletedTask;

        _previousUrl = _navigation.Uri;
        PageID = pageID;
        _navigation.NavigateTo($"pageTree/learn/projects/{ProjectID}/pages/{pageID}");

        return Task.CompletedTask;
    }

    private Task OnPropertyClick(TreeLayout.TreeNode property) => NavigateTo(property.Identity.ID);

    private Task OnNavigateUp() => NavigateTo(_vm.Path.LastOrDefault()?.ID);

    private async Task OnAddSubPage(string pageID, int index)
    {
        await _commands.Execute(new CreateSubPageCommand(pageID, index));
        await RefreshView();
    }

    private async Task OnAddSubPageOnTop()
    {
        await _commands.Execute(new CreateSubPageCommand(PageID, 0));
        await RefreshView();
    }

    private async Task OnAddSubPageOnBottom()
    {
        await _commands.Execute(new CreateSubPageCommand(PageID, int.MaxValue));
        await RefreshView();
    }

    private async Task OnPropertyRemove(string pageID, string propertyID)
    {
        await _commands.Execute(new RemovePropertyCommand(PageID, propertyID));
        await RefreshView();
    }

    private async Task OnPropertyReorder(string pageID, string propertyID, int index)
    {
        await _commands.Execute(new ChangeIndexOfPropertyCommand(pageID, propertyID, index));
        await RefreshView();
    }

    private async Task OnPropertyResignature(string propertyID, string signatureID)
    {
        await _commands.Execute(new ChangeSignatureOfPageCommand(propertyID, signatureID));
        await RefreshView();
    }

    private async Task<bool> OnPropertyRename(string propertyID, string name)
    {
        await _commands.Execute(new ChangeNameOfPageCommand(propertyID, name));
        await RefreshView();

        return true;
    }

    private async Task OnSelectLinkInputChanged(string projectID, string input)
    {
        var searchResultOut = await _queries.Execute<GetPagesSearchResultsQuery, GetPagesSearchResultsQueryOut>(
            new GetPagesSearchResultsQuery(projectID, input));

        if (searchResultOut?.PageVM != null)
            await _view.UpdateSelectLinkWindow(searchResultOut.PageVM);
    }

    private async Task OnSelectLinkSelected(string pageID, int index, string linkID)
    {
        await _commands.Execute(new CreateLinkCommand(pageID, linkID, index));
        await RefreshView();
    }

    private async Task OnPropertyMoveLevel(string parentPageID, string propertyID, string newParentPageID)
    {
        await _commands.Execute(new ChangeLevelOfPropertyCommand(parentPageID, propertyID, newParentPageID));
        await RefreshView();
    }

    private Task OnPathElementClick(string id) => NavigateTo(id);

    protected override string QueryParameter => PageID;
}
