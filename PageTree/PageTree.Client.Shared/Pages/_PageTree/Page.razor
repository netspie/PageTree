@attribute [Route(Uris.Page)]

@inherits BasePage<GetPageQuery, GetPageQueryOut, PageVM, PageTree.Client.Shared.Views.Pages.Page>

@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorViews.Layouts;
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Microsoft.JSInterop;
@using PageTree.App.Pages.Commands;
@using PageTree.App.Pages.Queries;
@using PageTree.App.Projects.Commands;

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>

    <PageTree.Client.Shared.Views.Pages.Page 
        @ref=_view
        Left=@context.Item1 Top=@context.Item2 
        OnPropertyClick=OnPropertyClick 
        Model=_vm
        OnAddSubPageOnTop=OnAddSubPageOnTop
        OnAddSubPageOnBottom=OnAddSubPageOnBottom 
        OnPropertyRemove=OnPropertyRemove 
        OnPropertyMove=OnPropertyReorder
        OnPropertyRename=OnPropertyRename />

</BackgroundAndContent>

@code {
    [Parameter] public string ProjectID { get; set; }
    [Parameter] public string PageID { get; set; } = _pageID;

#if DEBUG
    private const string _pageID = "350b10d0-f72a-4f8f-92a6-5da3b80cac6a";
#else
    private const string _pageID = "20caa0c3-243b-47f9-968f-2d6a1e0dd27a";
#endif

    protected override Task OnInitializedAsync()
    {
        _navigation.LocationChanged += OnLocationChanged;

        return base.OnInitializedAsync();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        await RefreshView();
    }

    private async Task OnPropertyClick(TreeLayout.TreeNode property)
    {
        PageID = property.Identity.ID;
        _navigation.NavigateTo($"pageTree/learn/projects/{ProjectID}/pages/{property.Identity.ID}");
    }

    private async Task OnAddSubPageOnTop()
    {
        await _commands.Execute(new CreateSubPageCommand(PageID, 0));
        await RefreshView();
    }

    private async Task OnAddSubPageOnBottom()
    {
        await _commands.Execute(new CreateSubPageCommand(PageID, int.MaxValue));
        await RefreshView();
    }

    private async Task OnPropertyRemove(string pageID, string propertyID)
    {
        await _commands.Execute(new RemovePropertyCommand(PageID, propertyID));
        await RefreshView();
    }

    private async Task OnPropertyReorder(string pageID, string propertyID, int index)
    {
        await _commands.Execute(new ChangeIndexOfPageCommand(pageID, propertyID, index));
        await RefreshView();
    }

    private async Task<bool> OnPropertyRename(string propertyID, string name)
    {
        await _commands.Execute(new ChangeNameOfPageCommand(propertyID, name));
        await RefreshView();
        
        return true;
    }

    protected override string QueryParameter => PageID;
}
