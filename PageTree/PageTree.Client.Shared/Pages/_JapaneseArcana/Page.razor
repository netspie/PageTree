@page "/learn/pages/{pageID}"

@inherits BasePage<GetPageQuery, GetPageQueryOut, PageVM, PageTree.Client.Shared.Views.Pages.Page>

@using Common.Basic.Collections;
@using Corelibs.Basic.Collections;
@using Corelibs.BlazorShared.UI;
@using Corelibs.BlazorViews.Layouts;
@using Microsoft.JSInterop;
@using PageTree.App.Pages.Queries;

<BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>
    <PageTree.Client.Shared.Views.Pages.Page 
        @ref=_view
        Left=@context.Item1 
        Top=@context.Item2
        IsEditMode=false
        
        Model=_vm

        OnNavigateUp=OnNavigateUp
        OnPropertyClick=OnPropertyClick />
</BackgroundAndContent>

@code {
    #if DEBUG
    public const string _pageID = "350b10d0-f72a-4f8f-92a6-5da3b80cac6a";
    public const string _projectID = "8e6458d5-ab4a-4dbd-b845-7727c5b87c9c";
#else
    public const string _pageID = "20caa0c3-243b-47f9-968f-2d6a1e0dd27a";
    public const string _projectID = "---";
#endif

    [Parameter] public string PageID { get; set; }
    private DotNetObjectReference<Page> _ref;
    private string _previousUrl;

    protected override async Task OnInitializedAsync()
    {
        _navigation.LocationChanged += OnLocationChanged;
        _ref = DotNetObjectReference.Create(this);
        
        await _jsRuntime.AddKeyDownEventHandler(_ref, nameof(OnKeyDown));
        await base.OnInitializedAsync();
    }

    [JSInvokableAttribute("OnKeyDown")]
    public async Task OnKeyDown(bool isCtrl, bool altKey, string key)
    {
        if (key == "Escape")
        {
            if (!_previousUrl.IsNullOrEmpty())
                await _jsRuntime.NavigateBack();
        }

        if (altKey && key == "ArrowUp")
        {
            await OnNavigateUp();
        }
    }

    private Task NavigateTo(string pageID)
    {
        if (!pageID.IsID())
            return Task.CompletedTask;

        _previousUrl = _navigation.Uri;
        PageID = pageID;
        _navigation.NavigateTo($"learn/pages/{pageID}");

        return Task.CompletedTask;
    }

    private Task OnPropertyClick(TreeLayout.TreeNode property) => NavigateTo(property.Identity.ID);
    private Task OnNavigateUp() => NavigateTo(_vm.Path.LastOrDefault()?.ID);

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        await RefreshView();
    }

    protected override string QueryParameter => PageID;
}
